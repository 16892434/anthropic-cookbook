# promptfooconfig.yaml

python_path: /opt/homebrew/bin/python3

providers:
  - id: anthropic:messages:claude-3-haiku-20240307
    label: "3 Haiku"
    config:
      max_tokens: 4096
      temperature: 0
  - id: anthropic:messages:claude-3-5-sonnet-20240620
    label: "3.5 Sonnet"
    config:
      max_tokens: 4096
      temperature: 0

prompts: 
  - prompts.py:generate_prompt
  - prompts.py:generate_prompt_with_examples
  - prompts.py:generate_prompt_with_cot
  - prompts.py:generate_prompt_with_rag
  - prompts.py:generate_prompt_with_self_improvement

tests:
  - description: "Check syntax of simple query"
    vars:
      user_query: "What are the names of all employees in the Engineering department?"
    assert:
      - type: contains
        value: "<sql>"
      - type: contains
        value: "</sql>"
      - type: python
        value: |
          import re

          def extract_sql(text):
              match = re.search(r'<sql>(.*?)</sql>', text, re.DOTALL)
              return match.group(1).strip() if match else ""

          def check_sql(sql):
              required_elements = ['select', 'from employees', 'join departments', "name = 'engineering'"]
              return all(element in sql.lower() for element in required_elements)

          sql = extract_sql(output)
          result = check_sql(sql)
          
          return {
              "pass": result,
              "score": 1 if result else 0,
              "reason": f"SQL query {'is correct' if result else 'is incorrect or not found'}"
          }
  - description: "Validate count of employees in Engineering department"
    vars:
      user_query: "How many employees are in the Engineering department?"
    assert:
      - type: contains
        value: "<sql>"
      - type: contains
        value: "</sql>"
      - type: python
        value: |
          import re
          import sqlite3

          def extract_sql(text):
              match = re.search(r'<sql>(.*?)</sql>', text, re.DOTALL)
              return match.group(1).strip() if match else ""

          def execute_sql(sql):
              conn = sqlite3.connect('../data/data.db')
              cursor = conn.cursor()
              cursor.execute(sql)
              results = cursor.fetchall()
              conn.close()
              return results

          sql = extract_sql(output)
          
          try:
              results = execute_sql(sql)
              count = results[0][0] if results else 0
              execution_success = True
          except Exception as e:
              execution_success = False
              count = 0
              print(f"SQL execution error: {e}")

          expected_count = 20

          return {
              "pass": execution_success and count == expected_count,
              "score": 1 if (execution_success and count == expected_count) else 0,
              "reason": f"SQL {'executed successfully' if execution_success else 'execution failed'}. "
                        f"Returned count: {count}, Expected count: {expected_count}."
          }
  - description: "Check specific employee details in Engineering department"
    vars:
      user_query: "Give me the name, age, and salary of the oldest employee in the Engineering department."
    assert:
      - type: contains
        value: "<sql>"
      - type: contains
        value: "</sql>"
      - type: python
        value: |
          import re
          import sqlite3

          def extract_sql(text):
              match = re.search(r'<sql>(.*?)</sql>', text, re.DOTALL)
              return match.group(1).strip() if match else ""

          def execute_sql(sql):
              conn = sqlite3.connect('../data/data.db')
              cursor = conn.cursor()
              cursor.execute(sql)
              results = cursor.fetchall()
              conn.close()
              return results

          sql = extract_sql(output)
          
          try:
              results = execute_sql(sql)
              row = results[0] if results else None
              execution_success = True
          except Exception as e:
              execution_success = False
              row = None
              print(f"SQL execution error: {e}")

          expected_result = {
              "name": "Julia Clark",
              "age": 64,
              "salary": 103699.17
          }

          if row:
              actual_result = {
                  "name": row[0],
                  "age": row[1],
                  "salary": row[2]
              }
              data_match = actual_result == expected_result
          else:
              data_match = False

          return {
              "pass": execution_success and data_match,
              "score": 1 if (execution_success and data_match) else 0,
              "reason": f"SQL {'executed successfully' if execution_success else 'execution failed'}. "
                        f"Data {'matches' if data_match else 'does not match'} expected result. "
                        f"Actual: {actual_result if row else 'No data'}, Expected: {expected_result}"
          }


outputPath: ../data/results.csv